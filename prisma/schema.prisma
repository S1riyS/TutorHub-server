generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  middleName  String  @map("middle_name")
  phoneNumber String  @map("phone_number")
  imageLink   String? @map("image_link")

  role Role

  tutorProfile   TutorProfile?
  studentProfile StudentProfile?
  adminProfile   AdminProfile?

  @@map("users")
}

model TutorProfile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  bio             String?
  birthDate       DateTime         @map("birth_date")
  teachingFormats TeachingFormat[]
  careerStartYear Int

  education  TutorEducation[]
  experience TutorExperince[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("tutor_profiles")
}

model TutorEducation {
  id                         String  @id @default(uuid())
  educationalInstitutionName String  @map("educational_institution_name")
  description                String
  graduationYear             Int     @map("graduation_year")
  isConfirmed                Boolean @default(false) @map("is_confirmed")

  TutorProfile   TutorProfile? @relation(fields: [tutorProfileId], references: [id])
  tutorProfileId String?       @map("tutor_profile_id")

  @@map("tutor_education")
}

model TutorExperince {
  id          String  @id @default(uuid())
  jobName     String
  startYear   Int
  endYear     Int?
  isConfirmed Boolean @default(false) @map("is_confirmed")

  TutorProfile   TutorProfile? @relation(fields: [tutorProfileId], references: [id])
  tutorProfileId String?       @map("tutor_profile_id")

  @@map("tutor_experience")
}

model StudentProfile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  grade Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
}

model AdminProfile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
}

enum TeachingFormat {
  REMOTELY
  AT_HOME
  GOES_TO_STUDENT
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}
